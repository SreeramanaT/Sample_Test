DevOps Complete Workflow
DevOps in Cloud
DevOps
	Imm Release
	Quality Redefined
	Cost Reduction

https://www.devopsschool.com/videos/387/complete-cicd-devops-implementation-from-

scratch-using-jenkins-by-devopsschool/
=================================================================
Prod - BroadX
Mgmr - Mgrx..

------------------------
Hiring - 
	Architect --- JIRA - Confluence
	DEV TEam - 10 FEA - 10 DEV
		Code Integ - Git
		Code Review
			Peer 
			Static - SonarQube
		Build - Maven - Ant - 
		UT - junit 
		Packaging - 
			SYSTEm
			APP - 
		Artifact mgmt - Nexus,
		---------------------------------
		Deployment 2 QA - INT - PRE PRO - PROD
		
		BroadX4.5 ----> 100 BOXES
		----------------------
		50 DEP - 50 L
		50 AP - 50 NG
		25 JB - 25 WL 0- 25 TO - 25 WS
		25 MYSQ 25 MSSQL25 ORA 25 PS
	`	100 DIFF
			-----------
		1 Dep - 9 mins
		100 Dep - 9 min?
		----------------------------
			Parrell
		COding - Chef - Ansible - Puppt - Salt
		UI - Octopus Deploy - Udeploy

		=============================================
		Container - Dcoker
		

		AT

		code Coverage

		Release
========================================================================================

==========
PLAN -> Code -> review -> UT -> Pack -> Archive -> Deploy2Qa+AT+CC -> Release
------------------------------------------------------------------------------
JIRA -> Git  -> SonarQube ->Junit-> Jar-> Nexus -> Chef-Sel-Jacoc ->>
========================================================================================

===============
					INTEGRATION
							JENKINS


			CD		-  Cont Delivery
			CD		-  Cont Deployment
		
GIT
NEXUS
JENINS
Docker
Terraform
Chef
=====================================
https://www.devopsschool.com/path
===================================================================================

What is Git?
	It is a repo?
	Version control
		for Source Code
	FREE tool
	Open Source
	Written by Linus
	DISTRIBUTED
	-------------------

Why git?
	You want to know...
			WHO 
			WHEN
			WHY
			WHERE
			WHAT 
	
Other tools
	RCS --> CVS -> SVN -> GIT
	VSS -> ClearCase -> Perforce -> Mercury -> TFS

========================================
DISTRIBUTED	VS SERVER_CLIENT
============================================================
How to install git?
	WINDOWS
		EXE
		-----
			git bash == Support basic linux comm + Color
		https://git-scm.com/
		NUGET
		CHOCLATE
	LINUX
		RHEL  - yum install git
		UB  - apt-get install git
	MAC 
		DMG 
			

Step 1 - Regiter at github.com and Verify Account
Step 2- Fill this form http://bit.ly/2p3HAVO

=============================================================
Basic Workflow with Git?
=======================================
Step 1- Create repo
$ git init

Step 2 - Write a Source Code

Step 3 - Add to git[From Working dir to Staging]
$ git add file1.txt

ONE TIME - 
============.git/config=====================
git config user.name "Rajesh Kumar"
git config user.email "devops@rajeshkumar.xyz"
git config --list

Step 4 - Commit to Git [From Staging  to Repo]
git commit -m"Adding my first commit"

Step 5 - See the history of 
$ git log

        	WHO 
			WHEN
			WHY
			WHERE
			WHAT 

Step 6 - Do you want to know changes done in WORKING dir - or Staging
$ git status


500  cd /e
  501  mkdir broadridge
  502  ls
  503  start .
  504  cd broadridge/
  505  clear
  506  mkdir repo1
  507  cd repo1/
  508  clear
  509  ls
  510  git init
  511  ls
  512  la -la
  513  ls -la
  514  start .
  515  clear
  516  touch file1.txt
  517  ls
  518  start .
  519  ls
  520  clear
  521  git add file1.txt
  522  git config user.name "Rajesh Kumar"
  523  git config user.email "devops@rajeshkumar.xyz"
  524  clear
  525  git config --list
  526  clear
  527  more .git/config
  528  cat .git/config
  529  clear
  530  clear
  531  git commit -m"Adding my first commit"
  532  git log
  533  ls
  534  git show d7f21a2401d85f584d46b762e529e7f077044f10
  535  history
536  clear
  537  git status
  538  ls
  539  git add file2.txt
  540  git status
  541  vi file1.txt
  542  git status
  543  git commit -m"adding"
  544  git status
  545  git add .
  546  git status
  547  git commit -m"adding"
  548  history

=================================================
RAJESH -> GIT(LR)
                DP  GIT(LR)
                    RAMM


============================================================================
USER1                           GITHUB                      USER2               



Branching and Merging
====================================
TYPES
        LOCAL BRANCH    READ and WRITE
        REMOTE BRANCH   READ ONLY
        Temporary Branch


PULL = FETCH + MERGE
================================

Branching
=============
 507  git branch
  508  git branch -r
  509  git branch -a
  510  git branch -a
  511  clear
  512  git branch login
  513  git branch -a
  514  git checkout login
  515  git branch -a
  516  clear
  517  ls
  518  git checkout master
  519  ls
  520  git checkout login
  521  clear
  522  touch login.java
  523  touch register.java
  524  git statsu
  525  git status
  526  clear
  527  ls
  528  git status
  529  git add .
  530  git commit -m"add lgojn"
  531  clear
  532  git commit -m"add lgojn"
  533  ls
  534  git checkout master
  535  ls
  536  git checkout login
  537  ls
  538  history


Merging
==========================================
FAST FORWARD

 538  history
  539  git push origin login
  540  clear
  541  touch ff1.txt;git add .;git commit -m"adding ff1"
  542  touch ff2.txt;git add .;git commit -m"adding ff2"
  543  git log --oneline
  544  git merge master
  545  git checkout master
  546  git merge login
  547  clear
  548  history

ef9fb55

RECURSIVE or 3 way Merging



Cherry Picking

 548  history
  549  clear
  550  touch master1.txt;git add .;git commit -m"adding master1"
  551  touch master2.txt;git add .;git commit -m"adding master2"
  552  git checkout login
  553  touch login1.txt;git add .;git commit -m"adding login1"
  554  clear
  555  touch login2.txt;git add .;git commit -m"adding login2"
  556  git checkout master
  557  touch master3.txt;git add .;git commit -m"adding master3"
  558  git checkout login
  559  touch login3.txt;git add .;git commit -m"adding login3"
  560  clear
  561  ls
  562  clear
  563  git log --oneline
  564  git checkout master
  565  git log --oneline
  566  clear
  567  git merge login
  568  git log --oneline
  569  clear
  570  git log --oneline
  571  git log
  572  clear
  573  git checkout master
  574  git checkout login
  575  clear
  576  touch cherry1.txt;git add .;git commit -m"cheery1"
  577  touch cherry2.txt;git add .;git commit -m"cheery2"
  578  touch cherry3.txt;git add .;git commit -m"cheery3"
  579  clear
  580  touch cherry4.txt;git add .;git commit -m"cheery4"
  581  git log --oneline
  582  clear
  583  git checkout master
  584  ls
  585  clear
  586*
  587  git checkout login
  588  git log --oneline
  589  git checkout master
  590  clear
  591  ls
  592  git cherry-pick ef9fb55
  593  ls
  594  git checkout login
  595  git log --oneline
  596  git checkout master
  597  git log --oneline
  598  git cherry-pick 37a67b9
  599  ls
  600  git merge login
  601  clear
  602  ls
  603  ls
  604  vi cherry1.txt
  605  git add .;git commit -m"adding"
  606  cat cherry
  607  cat cherry.1
  608  cat cherry1.txt
  609  git checkout login
  610  vi cherry1.txt
  611  git add .;git commit -m"addindsddsg"
  612  git checkout master
  613  clear
  614  ls
  615  cat cherry1.txt
  616  git merge login
  617  git status
  618  vi cherry1.txt
  619  git add .;git commit -m"addindsddsg"
  620  git status
  621  git merge login
  622  history
 621  gls
  622  ls
  623  git pull origin master
  624  ls
  625  clear
  626  ls
  627  ls
  628  git brahch -a
  629  git branch -a
  630  clear
  631  git fetch origin master
  632  git fetch origin master
  633  ls
  634  git branch -a
  635  git checkout remotes/origin/master
  636  ls
  637  git log
  638  clear
  639  ls
  640  git checkout master
  641  git merge e:   Fri Jan 31 16:59:49 2020 +0530
  642  clear
  643  git branch -a
  644  git merge remotes/origin/master
  645  ls
  646  clear
  647  git fetch origin mastetr
  648  git fetch origin master
  649  cler
  650  ls
  651  clear
  652  ls
  653  git branch -a
  654  git checkout remotes/origin/master
  655  ls
  656  git checkout master
  657  git merge remotes/origin/master
  658  ls
  659  history


GUI 
    SourceTree
    Visutal Studio code
    Eclipse


Delete a file1
HEAD
WHY U SHOULD NOT USE BINARY IN Git
How to collab together?
How to see diff?
Branching 
        Rebase 
        Reset
Merging
Conflict resol
Undoing
==================
    clean
    reset
    revert

Tutorials  - https://www.devopsschool.com/tutorial/git
Slides - https://www.devopsschool.com/slides/
videos - https://www.devopsschool.com/videos/show/git?p=2
        https://www.youtube.com/channel/UCrXr49kBvXJeQMMl2693c4g    
blog
        https://www.devopsschool.com/blog/?s=git
PDF
        https://www.devopsschool.com/pdf/git/index.html 
QA
        https://www.devopsschool.com/lms/
        USING GMAIL ID ONLY
